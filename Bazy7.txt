ZADANNIE 1

a) delimiter $$ CREATE TRIGGER kreatura_edycja BEFORE INSERT, UPDATE ON kreatura FOR EACH ROW BEGIN IF waga>0 THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Waga kreatury jest wieksza od zera'; END IF; END$$


ZADANIE 2

a) CREATE TRIGGER archiwum_wypraw AFTER DELETE ON wyprawa 
FOR EACH ROW BEGIN INSERT INTO archiwum_wypraw (id_wyprawy, nazwa, data_rozpoczecia, data_zakonczenia, kierownik ) VALUES (wyprawa.id_wyprawy, wyprawa.nazwa, wyprawa.data_rozpoczecia, wyprawa.data_zakonczenia, (SELECT nazwa FROM kreatura WHERE idKreatury = wyprawa.kierownik));
END $$



ZADANIE 3 

a)  CREATE PROCEDURE eliksir_sily (IN id_kreatury INT) BEGIN UPDATE kreatury SET udzwig = udzwig * 1.2 WHERE id_kreatury = id_kreatury; END $$


b) CREATE FUNCTION zamien_na_wielkie_litery (tekst VARCHAR(255)) RETURNS VARCHAR(255) BEGIN DECLARE wynik VARCHAR(255); SET wynik = UPPER(tekst); RETURN wynik; END$$
SELECT zamien_na_wielkie_litery('Ala ma kota')$$


ZADANIE 4

a) CREATE TRIGGER alarm_tesciowa AFTER INSERT ON wyprawa
FOR EACH ROW BEGIN
  IF NEW.id_kreatury = (SELECT id_kreatury FROM kreatury WHERE nazwa = 'Teściowa') AND NEW.sektory LIKE '%domek dziadka%' THEN
    INSERT INTO system_alarmowy (wiadomosc) VALUES ('Teściowa nadchodzi !!!');
  END IF;


